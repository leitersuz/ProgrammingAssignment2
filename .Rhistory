q()
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1
myMatrix_object <- makeCacheMatrix(m1)
##Create cacheSolve function to retrieve the inverse from makeCacheMatrix()
##cacheSolve computes the inverse of the matrie returned by makeCacheMatrix
##If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x
##Retrieve inverse of matrix x
s <- x$getsolve()
##Check whether the result is null
##If the value is not null, there is a cached value of s to retrieve
if(!is.null(s)){
message("Getting cached data...")
return(s)
}
##If s is null, then nothing will be returned above
##Then, we will use the get function to retrieve the input matrix
data <-x$get()
##and use the solve function to calculate the inverse of the matrix x
s <-solve(data,...)
##use setsolve() on the input to set the inverse
x$setsolve(s)
##returns the value of the inverse to the parent environment by printing
s
}
myMatrix_object <- makeCacheMatrix(m1)
## This code creates a pair of functions that cache the inverse of a matrix
## Create a makeCacheMatrix function to create a spacial matrix object
## The object will be able to cache its inverse
## This function creates four functions to set and get the values
## THese functions are returned within a list to the parent environment
##Start by initializing the objects x and s which will store info
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
##Set the value of the matrix
set <- function(y){
x <<- y  ##This assigns the value of y to x in the parent environment
s <<- NULL  ##This assigns s as null in the parent environment
## This clears any prior cached value of s
}
##Get the value of the matrix
get <- function()x  ##Retrieves the matrix x from the parent environment
##Set the value of the inverse
##This assigns the value of the inverse of matrix s to setsolve
##Using value of s from parent environment
setsolve <- function(solve) s<<- solve
##Get the value of the inverse
getsolve <- function() s
##Assign each function to list
##Name each element so that $ operator can be uesd in cacheSolve function
list(set=set, get=get, setsolve=setsolve, getsolve=getsolve)
}
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
q()
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
q()
